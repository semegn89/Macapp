document.addEventListener('DOMContentLoaded', () => {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');
    const closeBtns = document.querySelectorAll('.modal-close');
  
    if (!loginBtn || !registerBtn || !loginModal || !registerModal) {
      console.warn('‚ùó Modal elements not found in DOM');
      return;
    }
  
    loginBtn.addEventListener('click', () => {
      console.log('üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ loginModal');
      loginModal.classList.add('active');
      loginModal.removeAttribute('hidden');
      loginModal.style.display = 'flex';
    });
  
    registerBtn.addEventListener('click', () => {
      console.log('üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ registerModal');
      registerModal.classList.add('active');
      registerModal.removeAttribute('hidden');
      registerModal.style.display = 'flex';
    });
  
    closeBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const modal = btn.closest('.modal');
        if (modal) {
          console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏');
          modal.classList.remove('active');
          modal.setAttribute('hidden', '');
          modal.style.display = 'none';
        }
      });
    });
document.getElementById('registerForm')?.addEventListener('submit', async e => {
  e.preventDefault();
  const form = e.target;
  clearErrors(form);

  const email = form.rEmail.value;
  const password = form.rPassword.value;

  try {
    const res = await fetch('https://macapp.onrender.com/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

    alert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.');
    form.reset();

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    document.getElementById('registerModal').style.display = 'none';
    document.getElementById('registerModal').setAttribute('hidden', '');
    document.getElementById('loginModal').style.display = 'flex';
    document.getElementById('loginModal').removeAttribute('hidden');
  } catch (err) {
    alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
  }
});
    window.handleLoginForm = async (e) => {
  e.preventDefault();
  const form = e.target;
  const email = form.modalEmail.value;
  const password = form.modalPassword.value;

  try {
    const res = await fetch('https://macapp.onrender.com/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥
    localStorage.setItem('token', data.token);
    localStorage.setItem('currentUser', JSON.stringify(data.user));
    document.body.classList.add('logged-in');

    alert('üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    location.reload(); // –ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å UI –≤—Ä—É—á–Ω—É—é
  } catch (err) {
    alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
  }
};
    const loginForm = loginModal.querySelector('#loginForm');
    if (loginForm && !loginForm.dataset.listenerAttached) {
      loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è window.handleLoginForm...');

        if (typeof window.handleLoginForm === 'function') {
          console.log('‚úÖ window.handleLoginForm —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º...');
          await window.handleLoginForm(e);
        } else {
          console.error('‚ùå window.handleLoginForm –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç submit');
        }
      });
      loginForm.dataset.listenerAttached = 'true';
    }
  });
