document.addEventListener('DOMContentLoaded', () => {
  const loginBtn = document.getElementById('loginBtn');
  const registerBtn = document.getElementById('registerBtn');
  const loginModal = document.getElementById('loginModal');
  const registerModal = document.getElementById('registerModal');
  const closeBtns = document.querySelectorAll('.modal-close');

  if (!loginBtn || !registerBtn || !loginModal || !registerModal) {
    console.warn('‚ùó Modal elements not found in DOM');
    return;
  }

  loginBtn.addEventListener('click', () => {
    console.log('üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ loginModal');
    loginModal.classList.add('active');
    loginModal.removeAttribute('hidden');
    loginModal.style.display = 'flex';
  });

  registerBtn.addEventListener('click', () => {
    console.log('üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ registerModal');
    registerModal.classList.add('active');
    registerModal.removeAttribute('hidden');
    registerModal.style.display = 'flex';
  });

  closeBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const modal = btn.closest('.modal');
      if (modal) {
        console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏');
        modal.classList.remove('active');
        modal.setAttribute('hidden', '');
        modal.style.display = 'none';
      }
    });
  });

  const loginForm = loginModal.querySelector('#loginForm');
  if (loginForm && !loginForm.dataset.listenerAttached) {
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è window.handleLoginForm...');

      if (typeof window.handleLoginForm === 'function') {
        console.log('‚úÖ window.handleLoginForm —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º...');
        await window.handleLoginForm(e);
      } else {
        console.error('‚ùå window.handleLoginForm –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç submit');
      }
    });
    loginForm.dataset.listenerAttached = 'true';
  }
});
// üì• –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
window.handleLoginForm = async (e) => {
  const form = e.target;
  const email = form.modalEmail.value;
  const password = form.modalPassword.value;

  try {
    const res = await fetch('https://macapp.onrender.com/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');

    localStorage.setItem('token', data.token);
    localStorage.setItem('currentUser', JSON.stringify(data.user));
    document.body.classList.add('logged-in');

    alert('üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    location.reload();
  } catch (err) {
    alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
  }
};

document.addEventListener('DOMContentLoaded', () => {
  const loginBtn = document.getElementById('loginBtn');
  const registerBtn = document.getElementById('registerBtn');
  const loginModal = document.getElementById('loginModal');
  const registerModal = document.getElementById('registerModal');
  const closeBtns = document.querySelectorAll('.modal-close');

  if (!loginBtn || !registerBtn || !loginModal || !registerModal) {
    console.warn('‚ùó Modal elements not found in DOM');
    return;
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
  loginBtn.addEventListener('click', () => {
    loginModal.classList.add('active');
    loginModal.removeAttribute('hidden');
    loginModal.style.display = 'flex';
  });

  registerBtn.addEventListener('click', () => {
    registerModal.classList.add('active');
    registerModal.removeAttribute('hidden');
    registerModal.style.display = 'flex';
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ
  closeBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const modal = btn.closest('.modal');
      if (modal) {
        modal.classList.remove('active');
        modal.setAttribute('hidden', '');
        modal.style.display = 'none';
      }
    });
  });

  // üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
  const loginForm = loginModal.querySelector('#loginForm');
  if (loginForm && !loginForm.dataset.listenerAttached) {
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (typeof window.handleLoginForm === 'function') {
        await window.handleLoginForm(e);
      }
    });
    loginForm.dataset.listenerAttached = 'true';
  }

  // üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registerForm = document.getElementById('registerForm');
  if (registerForm && !registerForm.dataset.listenerAttached) {
    registerForm.addEventListener('submit', async e => {
      e.preventDefault();
      const email = registerForm.rEmail.value;
      const password = registerForm.rPassword.value;

      try {
        const res = await fetch('https://macapp.onrender.com/api/auth/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });

        const data = await res.json();
        if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

        alert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.');
        registerForm.reset();

        registerModal.style.display = 'none';
        registerModal.setAttribute('hidden', '');
        loginModal.style.display = 'flex';
        loginModal.removeAttribute('hidden');
      } catch (err) {
        alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
      }
    });
    registerForm.dataset.listenerAttached = 'true';
  }
});
