
// ==== CABINET_MODULES –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ====
const CABINET_MODULES = {
  payments: "./payments.js",
  stats: "./stats.js",
  documents: "./documents.js",
  rates: "./rates.js",
  templates: "./templates.js",
  adminPanel: "./adminPanel.js",
  userCabinet: "./userCabinet.js",
  userCabinet1: "./First.js",
};

async function importCabinetPage(pageKey) {
  const path = CABINET_MODULES[pageKey];
  if (!path) return null;
  try {
    return await import(path);
  } catch (err) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å ${pageKey}:`, err);
    return null;
  }
}

async function tryRenderRealPage(pageKey) {
  const mod = await importCabinetPage(pageKey);
  if (!mod) return false;
  console.log('üîÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å:', pageKey, mod);
  const fnName = pageKey === 'adminPanel'
  ? 'renderAdminPanel'
  : 'render' + pageKey[0].toUpperCase() + pageKey.slice(1) + 'Page';
  if (typeof mod[fnName] === 'function') {
    await mod[fnName]();
    return true;
  }
  return false;
}

window.loadPage = async function (pageKey) {
  const ok = await tryRenderRealPage(pageKey);
  if (!ok) console.warn(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${pageKey} –Ω–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è`);
};

console.log('üî• main1.js –ó–ê–ü–£–©–ï–ù');

// ===== renderErrorPage =====
function renderErrorPage(err) {
  document.body.innerHTML = `
    <div class="error-container" style="min-height:100vh;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;gap:1rem;font-family:Inter,sans-serif;">
      <h1 style="font-size:2rem;color:#EF4444;">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
      <p>${err.message}</p>
      <button style="padding:.75rem 1.5rem;border:none;border-radius:6px;background:#2563EB;color:#fff;font-weight:600;cursor:pointer;" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
    </div>`;
}

// ===== hidePreloader =====
function hidePreloader() {
  const preloader = document.querySelector('.preloader');
  if (!preloader) return;

  preloader.classList.add('fade-out');

  preloader.addEventListener('transitionend', () => preloader.remove(), { once: true });

  setTimeout(() => {
    if (document.body.contains(preloader)) preloader.remove();
  }, 1000);
}
// ===== initCounters =====
function initCounters() {
  const counters = document.querySelectorAll(".counter");
  if (!counters.length) return;

  const observer = new IntersectionObserver(
    (entries) =>
      entries.forEach((e) => {
        if (e.isIntersecting) {
          animateCounter(e.target);
          observer.unobserve(e.target);
        }
      }),
    { threshold: 0.5 }
  );

  counters.forEach((el) => observer.observe(el));
}

function animateCounter(el) {
  const target = +el.getAttribute("data-count");
  const duration = 2000;
  const step = target / (duration / 16);
  let current = 0;
  const timer = setInterval(() => {
    current += step;
    if (current >= target) {
      clearInterval(timer);
      current = target;
    }
    el.textContent = Math.floor(current).toString();
  }, 16);
}
// ===== initThemeSwitcher =====
function initThemeSwitcher() {
  const btn = document.getElementById("toggleDarkMode");
  if (!btn) return;

  const icon = btn.querySelector("i");

  const updateIcon = () => {
    if (icon) icon.className = document.body.classList.contains('dark-mode')
      ? "fas fa-sun" : "fas fa-moon";
  };

  btn.addEventListener("click", () => {
    document.body.classList.toggle("dark-mode");
    updateIcon();
    localStorage.setItem("darkMode", document.body.classList.contains("dark-mode"));
  });

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
  if (localStorage.getItem("darkMode") === "true") {
    document.body.classList.add("dark-mode");
  }

  updateIcon();
}

// ===== initMobileMenu =====
function initMobileMenu() {
  const btn = document.getElementById("hamburgerBtn");
  const nav = document.getElementById("mobileNav");
  if (!btn || !nav) return;

  btn.addEventListener("click", () => {
    const expanded = btn.getAttribute('aria-expanded') === 'true';
    btn.setAttribute('aria-expanded', String(!expanded));
    btn.classList.toggle("active");
    nav.classList.toggle("active");
    const isOpen = nav.classList.contains("active");
    if (isOpen) {
      nav.removeAttribute("hidden");
      document.body.classList.add("no-scroll");
    } else {
      nav.setAttribute("hidden", "");
      document.body.classList.remove("no-scroll");
    }
  });
}

// ===== toggleLoggedInUI =====
function toggleLoggedInUI(loggedIn) {
  document.querySelectorAll('.auth-link').forEach(link => {
    const isLogout = link.id?.toLowerCase().includes('logout');
    link.style.display = loggedIn ? (isLogout ? 'block' : 'none') : (!isLogout ? 'block' : 'none');
  });
}

// ===== showToast =====
function showToast(message, type = 'info') {
  const toast = document.createElement('div');
  toast.className = `toast toast-${type}`;
  toast.textContent = message;
  document.getElementById('toastContainer')?.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

window.handleLoginForm = async function (e) {
  e.preventDefault();
  const email = document.getElementById('modalEmail')?.value.trim();
  const password = document.getElementById('modalPassword')?.value.trim();

  try {
    const res = await fetch('https://macapp.onrender.com/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');

    localStorage.setItem('token', data.token);
    localStorage.setItem('currentUser', JSON.stringify(data.user));
    document.body.classList.add('logged-in');

    closeModal(document.getElementById('loginModal'));
    showToast('üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
    window.dispatchEvent(new CustomEvent('authChanged'));
  } catch (err) {
    alert('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + err.message);
  }
};

// ===== updateAuthUI =====
function updateAuthUI() {
  const userRaw = localStorage.getItem('currentUser');
  const user = userRaw ? JSON.parse(userRaw) : null;

  toggleLoggedInUI(!!user);

  if (user?.role === 'admin') {
    document.querySelector('[data-page="adminPanel"]')?.classList.remove('hidden');
    window.loadPage?.('adminPanel');
  } else {
    document.querySelector('[data-page="adminPanel"]')?.classList.add('hidden');
  }
}

window.addEventListener('authChanged', () => {
  updateAuthUI?.();
});
  

window.debugLoginFlow = async () => {
  console.log('üß™ –¢–µ—Å—Ç: —Å—Ç–∞—Ä—Ç');

  const user = {
    email: 'admin@mail.ru',
    role: 'admin',
    feePercent: 0,
    currentBalance: 0,
    directorName: '',
    agreementNo: '',
    agreementDate: ''
  };

  try {
    localStorage.setItem('isLoggedIn', 'true');
    localStorage.setItem('currentUser', JSON.stringify(user));

    console.log('üìç [4] –¥–æ–±–∞–≤–ª—è–µ–º logged-in –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º');
    document.body.classList.add('logged-in');
    renderMainSiteContent();

    console.log('üìç [5] –∑–∞–≥—Ä—É–∂–∞–µ–º adminPanel');
    window.loadPage?.('adminPanel');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ debugLoginFlow:', err);
  }
};


// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–±–∏–Ω–µ—Ç (–æ—Ç–ª–∞–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function renderMainSiteContent() {
  console.log('üß© renderMainSiteContent –í–´–ó–í–ê–ù (–≤–Ω—É—Ç—Ä–∏)');
  try {
    const content = document.getElementById('content');
    if (content) {
      content.style.display = '';
      console.log('‚úÖ content –≤–∫–ª—é—á–µ–Ω');
    }

    const cabinetCss = document.getElementById('cabinetCss');
    if (cabinetCss) {
      cabinetCss.removeAttribute('disabled');
      console.log('‚úÖ cabinetCss –≤–∫–ª—é—á–µ–Ω');
    }

    document.querySelector('footer.footer')?.style.setProperty('display', 'none');
    hidePreloader();

    const user = JSON.parse(localStorage.getItem('currentUser'));
    if (user?.role === 'admin') {
      window.loadPage?.('adminPanel');
    } else {
      window.loadPage?.('payments'); // ‚úÖ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ renderMainSiteContent:', err);
  }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–Ω–¥–∏–Ω–≥ (–∑–∞–º–µ–Ω—è–µ—Ç renderLandingPageContent)
function renderLandingPageContent() {
  document.querySelectorAll(".landing-section, .hero, header.header, footer.footer")
          .forEach((el) => (el.style.display = "block"));
  document.body.classList.remove("logged-in");
  document.getElementById("content")?.style.setProperty("display", "none");
  document.body.style.overflow = "";
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É—Ç–µ—Ä, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
  document.querySelector('footer.footer')?.style.setProperty('display', 'block');
}

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –≤–µ—Ä—Å–∏–∏ open/close –º–æ–¥–∞–ª–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.openModal = function(modal) {
  if (!modal) return;
  modal.style.display = 'flex';
  modal.classList.add('active');
  modal.removeAttribute('hidden');
  document.body.classList.add('no-scroll');
};

window.closeModal = function(modal) {
  if (!modal) return;
  modal.style.display = 'none';
  modal.classList.remove('active');
  document.body.classList.remove('no-scroll');
  modal.setAttribute('hidden', '');
};

window.closeAllModals = function() {
  document.querySelectorAll(".modal.active").forEach((m) => closeModal(m));
};

console.log('üß™ main1.js –≥–æ—Ç–æ–≤. handleLoginForm –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

// –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞
window.handleLogout = function () {
  console.log('üîì –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞');
  document.body.classList.remove('logged-in');
  document.getElementById('content')?.style.setProperty('display', 'none');
  document.getElementById('cabinetCss')?.setAttribute('disabled', 'true');
  localStorage.removeItem('isLoggedIn');
  renderLandingPageContent();
};

// ===== initNavigation =====
function initNavigation() {
  // Smooth scroll
  document
    .querySelectorAll('header .nav-item[href^="#"]')
    .forEach((a) => {
      a.addEventListener("click", (e) => {
        const href = a.getAttribute("href");
        if (href && href !== "#") {
          e.preventDefault();
          const tgt = document.querySelector(href);
          if (tgt) {
            tgt.scrollIntoView({ behavior: "smooth" });
            const nav = document.getElementById("mobileNav");
            if (nav?.classList.contains("active"))
              document.getElementById("hamburgerBtn")?.click();
          }
        }
      });
    });

  // Icons –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
  document.querySelectorAll(".sidebar .icon").forEach((icon) => {
    icon.addEventListener("click", () => window.loadPage?.(icon.dataset.page));
  });
}

// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã—Ö–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
  const token = localStorage.getItem('token');
  const userRaw = localStorage.getItem('currentUser');

  if (token && userRaw) {
    const user = JSON.parse(userRaw);
    document.body.classList.add('logged-in');

    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.style.display = 'inline-block';
      logoutBtn.addEventListener('click', () => {
        localStorage.removeItem('token');
        localStorage.removeItem('currentUser');
        document.body.classList.remove('logged-in');
        location.reload();
      });
    }

    // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const header = document.querySelector('.header');
    if (header && user.email) {
      const hello = document.createElement('div');
      hello.textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.email}`;
      hello.style.marginLeft = '1rem';
      hello.style.color = 'white';
      header.appendChild(hello);
    }
  }
  initNavigation();
  initThemeSwitcher();
  initMobileMenu();
  initCounters();
});



// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (localStorage.getItem('isLoggedIn') === 'true') {
  document.body.classList.add('logged-in');
  renderMainSiteContent();

 try {
      const user = JSON.parse(localStorage.getItem('currentUser'));
      if (user?.role === 'admin') {
        window.loadPage?.('adminPanel');
      } else {
        window.loadPage?.('payments'); // üëâ —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë—Ç –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è currentUser –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ');
    }
}
document.addEventListener('DOMContentLoaded', () => {
  const descriptions = {
    transfers: "–ë—ã—Å—Ç—Ä—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
    business: "–†–µ—à–µ–Ω–∏—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü: —ç–∫—Å–ø–æ—Ä—Ç, –∏–º–ø–æ—Ä—Ç, —Ä–∞—Å—á—ë—Ç—ã —Å –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.",
    payment: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö.",
    currency: "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º. –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä—ã–Ω–∫—É.",
    consulting: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º, –≤–∞–ª—é—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∏ –Ω–∞–ª–æ–≥–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.",
    mobile: "–£–¥–æ–±–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ ‚Äî Telegram, WhatsApp, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AgentAPP."
  };

  document.querySelectorAll('.service-link[data-service]').forEach(btn => {
    btn.addEventListener('click', e => {
      e.preventDefault();
      const key = btn.dataset.service;
      const modal = document.getElementById('serviceModal');
      const content = document.getElementById('serviceModalContent');
      content.textContent = descriptions[key] || "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
      modal.style.display = 'flex';
      modal.removeAttribute('hidden');
    });
  });

  document.querySelector('#serviceModal .modal-close')?.addEventListener('click', () => {
    const modal = document.getElementById('serviceModal');
    modal.style.display = 'none';
    modal.setAttribute('hidden', '');
  });

  document.getElementById('serviceModal')?.addEventListener('click', e => {
    if (e.target.id === 'serviceModal') {
      e.currentTarget.style.display = 'none';
      e.currentTarget.setAttribute('hidden', '');
    }
  });
});
